/*
 ******************************************************
 * Check command template for check_vmware_esx plugin *
 *                                                    *
 * Requeriments                                       *
 *  https://github.com/BaldMansMojo/check_vmware_esx  *
 *                                                    *
 * Dependency                                         *
 *  plugin-check-command template command             *
 ******************************************************
*/


// check_vmware_esx plugin dir
//const vmwareEsxPluginDir = "/usr/lib/nagios/plugins"
const vmwareEsxPluginDir = "/tmp/check_vmware_esx"

	
/* main template */
template CheckCommand "vmware-esx-command" {
	import "plugin-check-command"
	
	command = [ vmwareEsxPluginDir + "/check_vmware_esx" ]
		
	arguments = {

		/* General options */
		"--ignore_unknown" = {
			set_if = "$vmware_ignoreunknown$"
			description = "Sometimes 3 (unknown) is returned from a component. But the check itself is ok. With this option the plugin will return OK (0) instead of UNKNOWN (3)."
		}
		"--ignore_warning" = { 
			set_if = "$vmware_ignorewarning$"
			description = "Sometimes 2 (warning) is returned from a component. But the check itself is ok (from an operator view)." 
		}
		"--timeout" = {
			value = "$vmware_timeout$" 
			description = "Seconds before plugin times out (default: 90)"
		}
		"--trace" = {
			set_if = "$vmware_trace$"
			description = "Set verbosity level of vSphere API request/respond trace."
		}

		/* authentication settings */
		"--sessionfile" = {
			value = "$vmware_sessionfile$"
			description = "Vmware auth session file - no efect if $vmware_nosession$ var is true"
		}
		"--sessionfiledir" = {
			value = "$vmware_sessionfiledir$"
			description = "Vmware auth session file directory - no efect if $vmware_nosession$ var is true"
		}
		"--nosession" = {
			set_if = "$vmware_nosession$"
			description = "No auth session - IT SHOULD BE USED FOR TESTING PURPOSES ONLY!" 
		}

		/* authentication settings for debugging purposes */
		"--username" = {
			value = "$vmware_username$"
			description = "Username to connect with."
		}
		"--password" = {
			value = "$vmware_password$"
			description = "Password to use with the username."
		}
		"--authfile" = {
			value = "$vmware_authfile$"
			description = "Autentication file content: \
								username=<username>  \
								password=<password>"
		}
	}
	vars.vmware_timeout = "90"
	vars.vmware_ignorewarning = false
	vars.vmware_auth_nosession = false
	vars.vmware_sessionfiledir = "/var/spool/icinga2/tmp"
	//vars.vmware_user = "icinga"
	//vars.vmware_password = "p@ssw0rd"
	//vars.vmware_authfile = "/etc/icinga2/vmware_esx_auth"
}



/* =============== DC ====================== */

template CheckCommand "vmware-esx-dc" {
	import "vmware-esx-command"

	arguments += {
		"--datacenter" = {
			value = "$vmware_datacenter$"
			required = true
			description = "Datacenter/Vcenter hostname."
		}
		"--sslport" = { 
			value = "$vmware_sslport$"
			description = "If a SSL port different from 443 is used."
		}
	}
	vars.vmware_sslport = "443"
}


object CheckCommand "vmware-esx-dc-volumes" {
	import "vmware-esx-dc"

	arguments += {
		"--select" = "volumes"
		"--subselect" = "$vmware_subselect$"
		"--gigabyte" = {
			set_if = "$vmware_gigabyte$"
			description = "Output in GB instead of MB"
		}
		"--usedspace" = { 
			set_if = "$vmware_usedspace$"
			description = "Output used space instead of free"
		}
		"--alertonly" = {
			set_if = "$vmware_alertonly$"
			description = "List only alerting volumes"
		}
		"--exclude" = "$vmware_exclude$"
		"--include" = "$vmware_include$"
		"--isregexp" = { 
			set_if = "$vmware_isregexp$"
		}
		"--warning" = "$vmware_warn$"
		"--critical" = "$vmware_crit$"
		
	}
	vars.vmware_usedspace = true
	vars.vmware_alertonly = false
	vars.vmware_warn = "80%"
	vars.vmware_crit = "90%"
}




object CheckCommand "vmware-esx-dc-runtime-info" {
	import "vmware-esx-dc"
	
	arguments += {
		"--select" = {
			value = "runtime"
			description = "Shows all runtime info for the datacenter/Vcenter."
		}
	}
}



object CheckCommand "vmware-esx-dc-runtime-listvms" {
	import "vmware-esx-dc"
	
	arguments += {
		"--select" = "runtime"
		"--subselect" = "listvms"
		"--exclude" = "$vmware_exclude$"
		"--include" = "$vmware_include$"
		"--isregexp" = { 
			set_if = "$vmware_isregexp$"
		}
		"--multiline" = {
			set_if = "$vmware_multiline$"
		}
		"--alertonly" = {
			set_if = "$vmware_alertonly$"

		}
	}
}


object CheckCommand "vmware-esx-dc-runtime-listhost" {
	import "vmware-esx-dc"
	
	arguments += {
		"--select" = "runtime"
		"--subselect" = "listhost"
		"--exclude" = "$vmware_exclude$"
		"--include" = "$vmware_include$"
		"--isregexp" = { 
			set_if = "$vmware_isregexp$"
		}
		"--multiline" = {
			set_if = "$vmware_multiline$"
		}
		"--alertonly" = {
			set_if = "$vmware_alertonly$"

		}
	}
}


object CheckCommand "vmware-esx-dc-runtime-listcluster" {
	import "vmware-esx-dc"
	
	arguments += {
		"--select" = "runtime"
		"--subselect" = "listcluster"
		"--exclude" = "$vmware_exclude$"
		"--include" = "$vmware_include$"
		"--isregexp" = { 
			set_if = "$vmware_isregexp$"
		}
		"--multiline" = {
			set_if = "$vmware_multiline$"
		}
		"--alertonly" = {
			set_if = "$vmware_alertonly$"

		}
	}
}


object CheckCommand "vmware-esx-dc-runtime-issues" {
	import "vmware-esx-dc"
	
	arguments += {
		"--select" = "runtime"
		"--subselect" = "issues"
		"--exclude" = "$vmware_exclude$"
		"--include" = "$vmware_include$"
		"--isregexp" = { 
			set_if = "$vmware_isregexp$"
		}
		"--multiline" = {
			set_if = "$vmware_multiline$"
		}
	}
}


object CheckCommand "vmware-esx-dc-runtime-status" {
	import "vmware-esx-dc"
	
	arguments += {
		"--select" = "runtime"
		"--subselect" = "status"
	}
}


object CheckCommand "vmware-esx-dc-runtime-tools" {
	import "vmware-esx-dc"
	
	arguments += {
		"--select" = "runtime"
		"--subselect" = "tools"
		"--poweredonly" = {
			set_if = "$vmware_poweredonly$"
		}
		"--exclude" = "$vmware_exclude$"
		"--include" = "$vmware_include$"
		"--isregexp" = { 
			set_if = "$vmware_isregexp$"
		}
		"--multiline" = {
			set_if = "$vmware_multiline$"
		}
		"--alertonly" = {
			set_if = "$vmware_alertonly$"
		}
	}
}

/* =============== SOAP ====================== */



template CheckCommand "vmware-esx-soap-host" {
	import "vmware-esx-command"

	arguments += {
		"--host" = {
			value = "$vmware_host$"
			required = true
			description = "ESX or ESXi hostname."
		}
		"--sslport" = { 
			value = "$vmware_sslport$"
			description = "If a SSL port different from 443 is used."
		}
	}
	vars.vmware_sslport = "443"
}


object CheckCommand "vmware-esx-soap-host-check" {
	import "vmware-esx-soap-host"
	
	arguments += {
		"--select" = {
			value = "soap"
			description = "simple check to verify a successfull connection to VMWare SOAP API."
		}
	}
}


object CheckCommand "vmware-esx-soap-host-uptime" {
	import "vmware-esx-soap-host"
	
	arguments += {
		"--select" = "uptime"
	}
}

#cpu
object CheckCommand "vmware-esx-soap-host-cpu" {
	import "vmware-esx-soap-host"
	
	arguments += {
		"--select" = "cpu"
		"--warning" = "$vmware_warn$"
		"--critical" = "$vmware_crit$"
	}
	vars.vmware_warn = "80%"
	vars.vmware_crit = "90%"
}


object CheckCommand "vmware-esx-soap-host-cpu-ready" {
	import "vmware-esx-soap-host"
	
	arguments += {
		"--select" = "cpu"
		"--subselect" = "ready"
	}
}

object CheckCommand "vmware-esx-soap-host-cpu-wait" {
	import "vmware-esx-soap-host"
	
	arguments += {
		"--select" = "cpu"
		"--subselect" = "wait"
	}
}
	
object CheckCommand "vmware-esx-soap-host-cpu-usage" {
	import "vmware-esx-soap-host"
	
	arguments += {
		"--select" = "cpu"
		"--subselect" = "usage"		
		"--warning" = "$vmware_warn$"
		"--critical" = "$vmware_crit$"
	}
	vars.vmware_warn = "80%"
	vars.vmware_crit = "90%"
}


#mem
object CheckCommand "vmware-esx-soap-host-mem" {
	import "vmware-esx-soap-host"
	
	arguments += {
		"--select" = "mem"
	}
}


object CheckCommand "vmware-esx-soap-host-mem-usage" {
	import "vmware-esx-soap-host"
	
	arguments += {
		"--select" = "mem"
		"--subselect" = "usage"
		"--warning" = "$vmware_warn$"
		"--critical" = "$vmware_crit$"
	}
	vars.vmware_warn = "80%"
	vars.vmware_crit = "90%"
}


object CheckCommand "vmware-esx-soap-host-mem-consumed" {
	import "vmware-esx-soap-host"
	
	arguments += {
		"--select" = "mem"
		"--subselect" = "consumed"
		"--warning" = "$vmware_warn$"
		"--critical" = "$vmware_crit$"
	}
}


object CheckCommand "vmware-esx-soap-host-mem-swapused" {
	import "vmware-esx-soap-host"
	
	arguments += {
		"--select" = "mem"
		"--subselect" = "swapused"
		"--multiline" = {
			set_if = "$vmware_multiline$"
		}	
		"--warning" = "$vmware_warn$"
		"--critical" = "$vmware_crit$"
	}
}


object CheckCommand "vmware-esx-soap-host-mem-overhead" {
	import "vmware-esx-soap-host"
	
	arguments += {
		"--select" = "mem"
		"--subselect" = "overhead"
		"--warning" = "$vmware_warn$"
		"--critical" = "$vmware_crit$"
	}
}


object CheckCommand "vmware-esx-soap-host-mem-memctl" {
	import "vmware-esx-soap-host"
	
	arguments += {
		"--select" = "mem"
		"--subselect" = "memctl"
		"--multiline" = {
			set_if = "$vmware_multiline$"
		}			
		"--warning" = "$vmware_warn$"
		"--critical" = "$vmware_crit$"
	}
}

#network
object CheckCommand "vmware-esx-soap-host-net" {
	import "vmware-esx-soap-host"
	
	arguments += {
		"--select" = "net"
		"--exclude" = "$vmware_exclude$"
		"--isregexp" = { 
			set_if = "$vmware_isregexp$"
		}
	}
}


object CheckCommand "vmware-esx-soap-host-net-usage" {
	import "vmware-esx-soap-host"
	
	arguments += {
		"--select" = "net"
		"--subselect" = "usage"
		"--warning" = "$vmware_warn$"
		"--critical" = "$vmware_crit$"
	}
}


object CheckCommand "vmware-esx-soap-host-net-receive" {
	import "vmware-esx-soap-host"
	
	arguments += {
		"--select" = "net"
		"--subselect" = "receive"
		"--warning" = "$vmware_warn$"
		"--critical" = "$vmware_crit$"
	}
}

object CheckCommand "vmware-esx-soap-host-net-send" {
	import "vmware-esx-soap-host"
	
	arguments += {
		"--select" = "net"
		"--subselect" = "send"
		"--warning" = "$vmware_warn$"
		"--critical" = "$vmware_crit$"
	}
}

object CheckCommand "vmware-esx-soap-host-net-nic" {
	import "vmware-esx-soap-host"
	
	arguments += {
		"--select" = "net"
		"--subselect" = "nic"
		"--exclude" = "$vmware_exclude$"
		"--isregexp" = { 
			set_if = "$vmware_isregexp$"
		}
	}
}
